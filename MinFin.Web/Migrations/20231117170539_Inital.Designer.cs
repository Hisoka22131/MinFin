// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MinFin.DB.Context;

#nullable disable

namespace MinFin.Web.Migrations
{
    [DbContext(typeof(MinFinDbContext))]
    [Migration("20231117170539_Inital")]
    partial class Inital
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MinFin.DB.Domain.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateDt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("MiddleName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PassportNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PassportSeries")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte>("PassportType")
                        .HasColumnType("tinyint");

                    b.Property<byte[]>("Password")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordKey")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte>("SignType")
                        .HasColumnType("tinyint");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateDt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreateDt = new DateTime(2023, 11, 17, 19, 5, 39, 313, DateTimeKind.Local).AddTicks(1019),
                            Email = "dima.Kambur.2001@mail.ru",
                            FirstName = "Dmitry",
                            IsDeleted = false,
                            MiddleName = "Sergeevich",
                            PassportNumber = "123123123",
                            PassportSeries = "12321312321",
                            PassportType = (byte)0,
                            Password = new byte[] { 180, 77, 190, 185, 8, 233, 97, 149, 194, 48, 44, 165, 129, 45, 112, 33, 66, 255, 236, 164, 200, 185, 180, 95, 32, 72, 115, 150, 13, 162, 158, 76, 172, 210, 134, 7, 160, 92, 252, 86, 143, 175, 94, 97, 199, 235, 76, 155, 50, 38, 168, 195, 121, 197, 125, 82, 85, 135, 47, 196, 196, 254, 48, 247 },
                            PasswordKey = new byte[] { 141, 97, 198, 117, 24, 86, 132, 208, 112, 245, 35, 164, 157, 141, 108, 136, 161, 12, 96, 54, 172, 57, 90, 57, 43, 229, 79, 190, 78, 155, 229, 241, 85, 149, 239, 235, 55, 176, 254, 0, 73, 160, 12, 209, 68, 153, 37, 79, 133, 82, 9, 7, 206, 163, 229, 187, 136, 241, 196, 30, 105, 167, 93, 42, 226, 43, 55, 148, 17, 18, 148, 166, 233, 89, 206, 123, 245, 24, 62, 88, 16, 87, 2, 148, 160, 156, 91, 219, 185, 213, 136, 130, 86, 232, 173, 250, 230, 252, 243, 130, 40, 74, 56, 160, 236, 67, 254, 169, 28, 37, 192, 26, 166, 253, 137, 25, 91, 237, 168, 217, 10, 233, 62, 95, 212, 61, 183, 205 },
                            SignType = (byte)0,
                            Surname = "Kambur",
                            UpdateDt = new DateTime(2023, 11, 17, 19, 5, 39, 313, DateTimeKind.Local).AddTicks(1065)
                        },
                        new
                        {
                            Id = 2,
                            CreateDt = new DateTime(2023, 11, 17, 19, 5, 39, 313, DateTimeKind.Local).AddTicks(1071),
                            Email = "what.is.love.kirilenko@mail.ru",
                            FirstName = "Vladislav",
                            IsDeleted = false,
                            MiddleName = "",
                            PassportNumber = "123123123",
                            PassportSeries = "12321312321",
                            PassportType = (byte)1,
                            Password = new byte[] { 180, 77, 190, 185, 8, 233, 97, 149, 194, 48, 44, 165, 129, 45, 112, 33, 66, 255, 236, 164, 200, 185, 180, 95, 32, 72, 115, 150, 13, 162, 158, 76, 172, 210, 134, 7, 160, 92, 252, 86, 143, 175, 94, 97, 199, 235, 76, 155, 50, 38, 168, 195, 121, 197, 125, 82, 85, 135, 47, 196, 196, 254, 48, 247 },
                            PasswordKey = new byte[] { 141, 97, 198, 117, 24, 86, 132, 208, 112, 245, 35, 164, 157, 141, 108, 136, 161, 12, 96, 54, 172, 57, 90, 57, 43, 229, 79, 190, 78, 155, 229, 241, 85, 149, 239, 235, 55, 176, 254, 0, 73, 160, 12, 209, 68, 153, 37, 79, 133, 82, 9, 7, 206, 163, 229, 187, 136, 241, 196, 30, 105, 167, 93, 42, 226, 43, 55, 148, 17, 18, 148, 166, 233, 89, 206, 123, 245, 24, 62, 88, 16, 87, 2, 148, 160, 156, 91, 219, 185, 213, 136, 130, 86, 232, 173, 250, 230, 252, 243, 130, 40, 74, 56, 160, 236, 67, 254, 169, 28, 37, 192, 26, 166, 253, 137, 25, 91, 237, 168, 217, 10, 233, 62, 95, 212, 61, 183, 205 },
                            SignType = (byte)1,
                            Surname = "Kirilenko",
                            UpdateDt = new DateTime(2023, 11, 17, 19, 5, 39, 313, DateTimeKind.Local).AddTicks(1072)
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
